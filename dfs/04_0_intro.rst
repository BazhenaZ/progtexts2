В этой теме опять будет большое количество задач. Поэтому я тут напишу
моё мнение по поводу того, что с ними делать. Во-первых, почти по по
каждой задаче есть ответ, а по некоторым задачам — ещё и подсказки. Они
попали в конец на отдельные страницы. Я надеюсь, что по каждой задаче в
итоге вы прочитаете и подсказку (ели она есть), и ответ. По некоторым
задачам ответа нет — думайте над ними сами.

Но, конечно, стоит над задачами сначала думать, а только потом читать
подсказки/ответы. Я надеюсь, что у вас будет достаточно времени на
размышления. Не ленитесь писать задачи :) на самом деле тут все просто,
и человек, который все это хорошо знает, потратит на написание и
тестирование каждой задачи максимум минут пятнадцать-двадцать, поэтому
три десятка задач — это работа всего на один день :). У вас с первого
раза это, скорее всего, займёт больше времени, но это только лишний
повод не полениться и сделать все задачи.

ИМХО, можно придерживаться следующего «алгоритма» работы над задачами:

Дочитать соответствующую теорию. Осознать, что вы все тут понимаете и
что, скорее всего, вопросов по написанию программы у вас не возникнет.
Если возникают какие-то вопросы, то ещё раз прочитать текст :), но не
забывать и самим додумывать то, что вы прочитали. Я хоть и старался
расписывать все подробно, но, конечно, собственное размышление также
должно присутствовать. Кроме того, учтите, что у меня вполне могут быть
различные опечатки и даже ошибки как в тексте, так и в примерах кода.

Начать писать программу. Довести её до состояния, что она компилируется
и запускается. Если не получается и не знаете, что писать, то см. п. 0.

Начать тестировать задачу. Сначала на маленьких простых тестах, потом на
более крутых. Постарайтесь проверить все возможные подлые случаи.
Пользуйтесь тем, что вы знаете правильный алгоритм и потому можете
продумать, какие случаи для него будут наиболее подлыми (но, конечно,
тестируйте и другие случаи).

Если нашли тест, на котором программа работает неправильно, то

Попробуйте попреобразовывать тест, уменьшая его размер, так, чтобы
получить как можно более маленький тест, на котором программа не
работает.

Попробуйте «методом пристального всматривания» в тест понять, в чем
состоит его особенность, что на нем программа не работает, чем таким он
отличается от тестов, на которых программа работает (конечно, это для
случаев, когда программа на большинстве тестов все-таки работает).

Здесь все алгоритмы довольно простые. Попробуйте прогнать алгоритм на
этом тесте вручную, и проверьте, что он правильно работает. Если нет, то
ищите ошибку или в вашем понимании алгоритма, или в вашем понимании
задачи, которую вы решаете. Не забывайте, что у меня в тексте могут быть
ошибки :)

Попробуйте подебаггать тем или иным способом вашу программу. Можно
добавлять «debug output», чтобы программа выводила на экран (или в
файл), что и в каком порядке она делает, можно дебаггать встроенным
дебаггером паскаля. Не забывайте, что BP своеобразно работает при дебаге
рекурсивных программ. При дебагге проверяйте, что все ключевые
переменные принимают именно те значения, которые вы от них ожидаете.
Обнаружив отклонение, ищите его корень :)

Постарайтесь продвинуться по этому алгоритму как можно дальше *до*
чтения подсказок и ответов. Если вы получили полностью работающую
программу, которая проходит все ваши, даже очень подлые, тесты, вы
круты. Обязательно прочитайте подсказку и ответ.

Учтите также, что любые задачи подразумевают, что вы хоть чуть-чуть, но
изобретёте что-нибудь! Если вы придумаете свой вариант решения, круто —
напишите и проверьте его, т.е. действуйте дальше по алгоритму.

Если за пару дней не получается решить задачу, читайте подсказку, если
она есть. Потом опять повторяйте все вышеприведённые шаги. Только после
этого читайте ответ и, если до сих пор у вас нет работающей программы,
то напишите её. Обязательно постарайтесь доведите каждую задачу до
работающего состояния. Если даже у вас была работающая программа,
подумайте, нельзя ли её ещё улучшить, пользуясь подсказкой и ответом.

Это все в первую очередь относится к задачам, которые подразумевают
написание программы. Аналогично можно поступать и с нетривиальными
теоретическими задачами; но есть пара задач, которые требуют ответа
сразу, не читая текста дальше. Про них действительно подумайте немного,
пока не будете уверены, что можете дать уверенный ответ с обоснованием.
Потом сверьтесь с ответом и читайте дальше.

Если у вас под рукой нет компьютера, это имхо тоже не повод сразу читать
ответы. Можно вообще отложить решение тех задач, которые требуют
компьютера, до тех пор, когда вы получите к нему доступ. Но по крайней
мере можно довести работу над задачей до готового текста программы,
написанного на бумажке, чтобы убедиться, что вы можете пройти первые два
из вышеприведённых шагов. На данном этапе имхо написать программу,
будучи почти уверенным в ней — это половина всего дела!

Кроме задач, конечно, я рассчитываю, что вы напишите (т.е. доведёте до
работающей оттестированной программы) все обсуждаемые здесь алгоритмы,
конечно, по вышеприведённой схеме. Полезно будет сначала проглядеть его
реализацию, приводимую мною в тексте, убедиться, что вы все понимаете, и
после этого писать программу, не подглядывая в текст.
