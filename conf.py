# Configuration file for the Sphinx documentation builder.
#
# This file only contains a selection of the most common options. For a full
# list see the documentation:
# https://www.sphinx-doc.org/en/master/usage/configuration.html

# -- Path setup --------------------------------------------------------------

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#
import os
import sys
sys.path.insert(0, os.path.abspath('.'))


# -- Project information -----------------------------------------------------

project = 'ProgTexts'
copyright = '2020, Petr Kalinin'
author = 'Petr Kalinin'


# -- General configuration ---------------------------------------------------

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = [
    "sphinx.ext.mathjax"
]

# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = 'ru'

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This pattern also affects html_static_path and html_extra_path.
exclude_patterns = ['_build', 'Thumbs.db', '.DS_Store']


# -- Options for HTML output -------------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
#
html_theme = 'alabaster'

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ['_static']

#---
master_doc = 'index'
mathjax_path = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=TeX-AMS_SVG'

from docutils import nodes
from docutils.parsers.rst import Directive
from docutils.parsers.rst import directives

FILES = {}

class TaskDirective(Directive):
    required_arguments = 0
    optional_arguments = 0
    final_argument_whitespace = True
    option_spec = {'name': directives.unchanged}
    has_content = True

    node_class = None
    """Subclasses must set this to the appropriate admonition node class."""

    def run(self):
        filename = self.state_machine.document.current_source
        basename = os.path.splitext(filename)[0]
        if filename not in FILES:
            FILES[filename] = [None] * 3
            FILES[filename][1] = open(basename + ".s.rst", "w")
            FILES[filename][2] = open(basename + ".a.rst", "w")
        self.assert_has_content()
        name = "Задача"
        if "name" in self.options:
            name = self.options["name"]
        self.content[0] = ":strong:`{}:` {}".format(name,  self.content[0])
        content = self.content
        state = 0
        res = [[], [], []]
        for idx, line in enumerate(self.content):
            if line.strip() == "|":
                state += 1
                if state == 1:
                    content = content[:idx]
            else:
                res[state].append(line)
        node = nodes.paragraph(rawsource="\n".join(content))
        self.state.nested_parse(content, self.content_offset, node)
        for i in (1, 2):
            FILES[filename][i].write("aaaaa\n")
            FILES[filename][i].write("\n".join(res[i]) + "\n")
        return [node]

def setup(app):
    app.add_directive('task', TaskDirective)